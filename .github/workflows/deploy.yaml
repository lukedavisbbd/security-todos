name: Deploy to AWS

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

env:
  AWS_REGION: af-south-1
  PROJECT_NAME: todo-app
  ENVIRONMENT: dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    - name: Terraform Init and Apply
      working-directory: ./infrastructure
      run: |
        terraform init
        terraform apply -auto-approve

    - name: Wait for RDS
      run: |
        aws rds wait db-instance-available \
          --db-instance-identifier ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-db \
          --region ${{ env.AWS_REGION }}

    - name: Get outputs
      working-directory: ./infrastructure
      run: |
        echo "BACKEND_ECR_URL=$(terraform output -raw backend_ecr_repository_url)" >> $GITHUB_ENV
        echo "S3_BUCKET=$(terraform output -raw s3_bucket_name)" >> $GITHUB_ENV
        echo "CLOUDFRONT_ID=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_ENV

    - name: Set image tag
      run: |
        echo "IMAGE_TAG=${GITHUB_SHA:0:8}" >> $GITHUB_ENV

    - name: Login to ECR
      run: |
        REGISTRY_URL=$(echo ${{ env.BACKEND_ECR_URL }} | cut -d'/' -f1)
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
        docker login --username AWS --password-stdin $REGISTRY_URL

    - name: Build and push backend
      run: |
        docker build -f backend.Dockerfile -t ${{ env.PROJECT_NAME }}-backend .
        docker tag ${{ env.PROJECT_NAME }}-backend:latest ${{ env.BACKEND_ECR_URL }}:${{ env.IMAGE_TAG }}
        docker push ${{ env.BACKEND_ECR_URL }}:${{ env.IMAGE_TAG }}

    - name: Setup Node.js for frontend build
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          common/package-lock.json
          frontend/package-lock.json

    - name: Build frontend
      run: |
        cd common
        npm ci
        cd ..
        
        cd frontend
        npm ci
        npm run build
        cd ..

    - name: Deploy frontend to S3
      run: |
        aws s3 sync frontend/dist/ s3://${{ env.S3_BUCKET }}/ --delete

    - name: Invalidate CloudFront cache
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ env.CLOUDFRONT_ID }} \
          --paths "/*"

    - name: Update ECS with new backend image
      working-directory: ./infrastructure
      run: |
        terraform apply -auto-approve \
          -var="backend_image=${{ env.BACKEND_ECR_URL }}:${{ env.IMAGE_TAG }}"

    - name: Force ECS backend deployment
      run: |
        CLUSTER_NAME="${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-cluster"
        BACKEND_SERVICE="${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-backend"
        
        aws ecs update-service --cluster $CLUSTER_NAME --service $BACKEND_SERVICE --force-new-deployment --region ${{ env.AWS_REGION }}

    - name: Get deployment info
      working-directory: ./infrastructure
      run: |
        CLOUDFRONT_DOMAIN=$(terraform output -raw cloudfront_domain_name)
        echo "Deployed at: https://todosecuritylevelup.com"
        echo "CloudFront domain: https://$CLOUDFRONT_DOMAIN"
        echo "API: https://todosecuritylevelup.com/api/"
        echo "Backend image tag: ${{ env.IMAGE_TAG }}"